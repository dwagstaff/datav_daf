//created on: Jan 21, 2018
package com.bsquare.datav.trucksidetool.re
import com.bsquare.datav.trucksidetool.re.PossibleStep;
import com.bsquare.datav.trucksidetool.re.DTC;
import com.bsquare.datav.trucksidetool.re.DtcClassification;
import com.bsquare.datav.trucksidetool.re.AdjustScore;
import com.bsquare.datav.trucksidetool.re.StepPerformed;



// Query to Return a list of all possible steps
query "Steps"
    s: PossibleStep(  )
end

// Query to return a list of Conclusions
query "Conclusions"
    c: Conclusion(  )
end

// Query to return list of Adjustments
query "Adjustments"
    s: AdjustScore(  )
end

// Convert any Strings into a Conclusion
rule "Convert Strings into Conclusions"
    when
        $s: String()
    then
        insert(new Conclusion($s));
end

// Assign Diagnostic Job Codes to PossibleSteps
rule "Assign Diagnostic Job to Possible Step"
    no-loop 
    when
        $ps:  PossibleStep( $stepId: stepId  )
        $djs: DiagnosticJobToStep($diagId:diagnosticID, stepId == $stepId )
    then
        modify($ps) {
            setDiagnosticJobCode($diagId);
        }
end


// Compute the number of times each Diagnostic step is used
rule "Compute usage count for a diagnostic step"
    no-loop 
    when
        $ps:  PossibleStep( $stepId: stepId  )
        $djs: DiagnosticJobToStep($diagId:diagnosticID, stepId == $stepId )
        $dj:  DiagnosticJob(diagnosticId == $diagId  )
    then
        modify($dj) {
            setUsedCount($dj.getUsedCount() + 1);
        }
end


// Bump Store of Steps which reference a diagnostic step which has more then one reference
rule "Increase score of steps which have a common diagnostic step"
    when
        $ps:  PossibleStep( $stepId: stepId  )
        $djs: DiagnosticJobToStep($diagId:diagnosticID, stepId == $stepId )
        $dj:  DiagnosticJob(diagnosticId == $diagId, usedCount > 1  )
    then
        String msg= String.format("Diag. %s referenced %d times", $diagId, $dj.getUsedCount());
        insertLogical(new AdjustScore($stepId, 20.0 * $dj.getUsedCount(), msg));
end



// Adjust score of Steps which are included in Predicted Cause Job Code Diagnostics
rule "Adjust Cause Job Code Diagnostics"
    when
        $jc:   PredictedJobCode($jcid:probableCauseId)
        $jcts: JobCodeToStep( jobCode == $jcid, $stepId: stepId  )
        $ps:   PossibleStep(stepId == $stepId)
    then
        String msg= String.format("Prescribed by job code %s", $jcid);        
        insertLogical(new AdjustScore($stepId, 1000.0 * $jc.getProbability(), msg));
end



// Lower score of steps which diagnose the same issue
rule "Same diagnostic"
    when
        $ps1: PossibleStep( $step1: stepId  )
        $ds1: DiagnosticJobToStep($dsid1: diagnosticID, stepId == $step1  )
        $ps2: PossibleStep( $step2: stepId , stepId > $step1 )
        $ds2: DiagnosticJobToStep($dsid2: diagnosticID, stepId == $step2, diagnosticID == $dsid1  )
    then
        String msg= String.format("Duplicate of diagnostic %s covered in step %s", $dsid1, $step1  );
        insertLogical(new AdjustScore($step2, -1000.0, msg));
end


rule "Adjust Step Scores"
    salience -10
    no-loop 
    when
        AdjustScore( $stepId:stepId, $adjustment:adjustment   )
        $ps: PossibleStep( stepId == $stepId, $currentScore:score  )
    then
        modify($ps) {
          setScore($currentScore + $adjustment);  
        }
end

// If a step is completed, then set it's score to -1 to lock it out
rule "Rule Completed"
    when
        StepPerformed( $stepID: stepId  )
        $ps: PossibleStep( stepId == $stepID, score > 0.0  )
    then
        modify($ps) {
            setScore(-1.0);
        };
        insert(new AdjustScore($stepID, -10000.0, "Step Performed"));
end


// Boost score of steps which support a Job Code we are interested in
//rule "Boost score of steps which are diagnostics for predicted job codes"
//    when
//        JobC
//    then
//end

        

rule "Add Rationality Adjustment"
    when
        DTC( $dtc:symptomId  )
        DtcClassification(dtc == $dtc, $class:classification, classification == Classification.Rationality )
        PossibleStep( dtc == $dtc, $stepId:stepId  )
    then
        insertLogical( new AdjustScore($stepId, 5.0, "DTC is " + $class) );
end
        
rule "Add Plausibility Adjustment"
    when
        DTC( $dtc:symptomId  )
        DtcClassification(dtc == $dtc, $class:classification, classification == Classification.Plausibility )
        PossibleStep( dtc == $dtc, $stepId:stepId  )
    then
        insertLogical( new AdjustScore($stepId, 4.0, "DTC is " + $class) );
end


rule "Add Communication Adjustment"
    when
        DTC( $dtc:symptomId  )
        DtcClassification(dtc == $dtc, $class:classification, classification == Classification.Communication )
        PossibleStep( dtc == $dtc, $stepId:stepId  )
    then
        insertLogical( new AdjustScore($stepId, 3.0, "DTC is " + $class) );
end

rule "Add Event Adjustment"
    when
        DTC( $dtc:symptomId  )
        DtcClassification(dtc == $dtc, $class:classification, classification == Classification.Event )
        PossibleStep( dtc == $dtc, $stepId:stepId  )
    then
        insertLogical( new AdjustScore($stepId, 2.0, "DTC is " + $class) );
end
